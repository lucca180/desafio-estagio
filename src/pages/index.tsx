import Head from "next/head";
import { Button, Flex, Heading, Image, Input, Text } from "@chakra-ui/react";
import { useState } from "react";
import { RepoCard } from "../../components/repoCard";

const intl = new Intl.NumberFormat("pt-BR");

export default function Home() {
  const [isLoading, setIsLoading] = useState(false);
  const [search, setSearch] = useState("");
  const [repos, setRepos] = useState<any[]>([]);
  const [nextPrev, setNextPrev] = useState<(string | null)[]>([null, null]);
  const [resultCount, setResultCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const [isError, setIsError] = useState(false);
  const [isIncomplete, setIsIncomplete] = useState(false);

  const handleSearch = async (target?: string) => {
    // setRepos([]);
    setIsLoading(true);

    let searchURL =
      target ??
      `https://api.github.com/search/repositories?q=${search}&sort=stars&order=desc`;

    const response = await fetch(searchURL);

    if (!response.ok) {
      setIsLoading(false);
      setIsError(true);
      throw "error";
    }

    const linkHeader = response.headers.get("Link");

    const prevPattern = /(?<=<)([\S]*)(?=>; rel="Prev")/i;
    const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;

    const prev = linkHeader?.match(prevPattern)?.[0] ?? null;
    const next = linkHeader?.match(nextPattern)?.[0] ?? null;

    const data = await response.json();

    setResultCount(data.total_count);
    setIsIncomplete(data.incomplete_results);
    setRepos(data.items);
    setNextPrev([prev, next]);
    setIsError(false);
    setIsLoading(false);

    if(typeof window !== 'undefined'){
      window.scrollTo({ top: 0, behavior: 'smooth' });
    }
  };

  const navigatePage = async (prevOrNext: "prev" | "next") => {
    const target = prevOrNext === "prev" ? nextPrev[0] : nextPrev[1];
    if (!target) return;
    try {
      await handleSearch(target);
      setCurrentPage((prev) => prev + (prevOrNext === "prev" ? -1 : 1));
    } catch (error) {}
  };

  return (
    <>
      <Head>
        <title>Github Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex
        minW="100vw"
        minH="100vh"
        flexFlow="column"
        justifyContent="center"
        alignItems="center"
        bg="gray.300"
        gap={3}
        py={3}
      >
        <Image
          src="https://github.githubassets.com/images/modules/logos_page/GitHub-Logo.png"
          alt="Github Logo"
          maxW={275}
          w="90%"
          mb={8}
        />
        <Flex
          w="100%"
          maxW="500px"
          flexFlow="column"
          justifyContent="center"
          alignItems="center"
          gap={3}
          px={3}
        >
          <Input
            variant="filled"
            value={search}
            placeholder="Pesquisar por repositório"
            onChange={(e) => setSearch(e.target.value)}
            isDisabled={isLoading}
          />
          <Button onClick={() => handleSearch()} isLoading={isLoading}>
            Procurar
          </Button>
        </Flex>
        <Flex
          flexFlow="column"
          w="100%"
          alignItems="center"
          // overflow="auto"
          gap={3}
          p={3}
        >
          {!!isError && (
            <Text color="red">
              Ocorreu um erro durante a busca, por favor tente mais tarde
            </Text>
          )}
          {!!repos.length && (
            <Flex gap={3} alignItems={"center"}>
              <Button
                size="sm"
                isDisabled={!nextPrev[0]}
                isLoading={isLoading}
                onClick={() => navigatePage("prev")}
              >
                Anterior
              </Button>
              <Text color="blackAlpha.700" fontSize="sm">
                Página {currentPage} de {isIncomplete ? "~" : ""}
                {Math.ceil(resultCount / 30)}
              </Text>
              <Button
                size="sm"
                isLoading={isLoading}
                isDisabled={!nextPrev[1]}
                onClick={() => navigatePage("next")}
              >
                Próximo
              </Button>
            </Flex>
          )}
          {repos.map((repo) => (
            <RepoCard key={repo.id} repo={repo} isLoading={isLoading} />
          ))}
        </Flex>
        {!!repos.length && (
          <Flex gap={3} alignItems={"center"}>
            <Button
              isDisabled={!nextPrev[0]}
              isLoading={isLoading}
              onClick={() => navigatePage("prev")}
              size="sm"
            >
              Anterior
            </Button>
            <Text color="blackAlpha.700" fontSize="sm">
              Página {currentPage} de {isIncomplete ? "~" : ""}
              {Math.ceil(resultCount / 30)}
            </Text>
            <Button
              isDisabled={!nextPrev[1]}
              isLoading={isLoading}
              onClick={() => navigatePage("next")}
              size="sm"
            >
              Próximo
            </Button>
          </Flex>
        )}
      </Flex>
    </>
  );
}
